enum IdentityType {
	"application",
	"web",
	"network"
};

enum SessionState {
	"not-started",
	"resolving-host",
	"connecting",
	"sending-data",
	"waiting-reply",
	"user-pending",
	"ui-refreshing",
	"process-pending",
	"started",
	"process-cenceling",
	"process-done",
	"custom"
};

enum UserPromptPolicy {
	"default",
	"request-password",
	"no-user-interaction",
	"validation"
};


dictionary MechanismQueryResult {
	DOMString method;
	DOMString[] mechanisms;
};

dictionary IdentityFilterItem {
	DOMString key;
	DOMString value;
};

interface AuthService {
	Promise queryMethods(); // returns DOMString[]
	Promise queryMechanisms(); // returns MechanismQueryResult
	Promise queryIdentities(IdentityFilterItem[] filter); // returns Identity[]
	Promise getIdentity(long id);  // returns Identity object
	Promise startSession(Identity identity, DOMString method);  // returns AuthSession object
	Promise clear();
};


dictionary SessionData {
	// default properties
	DOMString UserName;
	DOMString Secret;
	DOMString Realm;
	DOMString NetworkProxy;
	DOMString NetworkTimeout;
	boolean RenewToken;

	// UI properties
	UserPromptPolicy UiPolicy;
	DOMString Caption;
	long WindowId;

	// this dictionary is extended with method/mechanism specific items
};

interface AuthSession : EventTarget {
	readonly attribute DOMString method;
	readonly attribute SessionState state;

	Promise queryAvailableMechanisms(DOMString[] wantedMechanisms); // returns DOMString[]
	Promise challenge(DOMString mechanism, SessionData authData); // returns SessionData
	Promise cancel();

	attribute EventHandler onstatechanged;
};


dictionary ACLEntry {
	DOMString sysContext;
	DOMString appContext;
	DOMString method;
	DOMString[] mechanisms;
};

dictionary IdentityInfo {
	IdentityType type;
	DOMString username;
	DOMString secret;
	boolean storeSecret;
	DOMString caption;
	DOMString[] realms;
	DOMString owner;
	ACLEntry[] accessControlList;
};


dictionary VerifyUserPrompt {
	DOMString forgotPasswordUrl;
	DOMString title;
	DOMString caption;
	DOMString message;
	DOMString captchaUrl;
};


Identity implements IdentityInfo;

[Constructor(IdentityInfo info)]
interface Identity {
	readonly attribute long id;
	readonly attribute boolean isStoringSecret;

	Promise requestCredentialsUpdate(DOMString message);
	Promise store();
	Promise addReference(DOMString reference);
	Promise removeReference(DOMString reference);
	Promise verifyUser(DOMString message);
	Promise verifyUser(VerifyUserPrompt params);
	Promise remove();
	Promise signOut();

	attribute EventHandler onsignedout;
	attribute EventHandler onremoved;
};

